apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "integration-bus.fullname" . }} # Templated name (release name)
  labels:
    {{- include "integration-bus.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }} # Use values from values.yaml
  selector:
    matchLabels:
      {{- include "integration-bus.selectorLabels" . | nindent 6 }} # Use selectorLabels helper
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        {{- include "integration-bus.selectorLabels" . | nindent 8 }} # Use selectorLabels helper
    spec:
      containers:
        - # Reference the image using the full internal OpenShift registry path
          # Format: image-registry.openshift-image-registry.svc:5000/<namespace>/<imagestream-name>:<tag>
          image: "image-registry.openshift-image-registry.svc:5000/{{ .Release.Namespace }}/{{ include "integration-bus.fullname" . }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always # Define when to pull the image
          # Use the full name (release name) for the container name for consistency
          name: {{ include "integration-bus.fullname" . }}
          ports:
            - containerPort: {{ .Values.service.appPort }} # Use values from values.yaml
              protocol: TCP
          resources: {} # Add resource requests/limits here if needed
          # volumeMounts: # Mount the ConfigMap volume
          #   - name: restrictor-config-volume # Name of the volume mount
          #     mountPath: /opt/restrictor.xml # Path inside the container to mount the file
          #     subPath: restrictor.xml # Mount only the specific file from the ConfigMap
          # env: # Add environment variables
          #   # Hardcoded JAVA_OPTS to pass the restrictorClass system property
          #   - name: JAVA_OPTS # Environment variable to pass JVM options
          #     value: "-Djolokia.policyLocation=file:///opt/restrictor.xml" 
        - image: {{ .Values.mosquittoImage.name }}:{{ .Values.mosquittoImage.tag }} # Use values from values.yaml (Mosquitto is likely from an external registry)
          imagePullPolicy: Always # Define when to pull the image
          name: mosquitto # Name of the second container (Mosquitto)
          ports:
            - containerPort: {{ .Values.service.mqttPort }} # Use values from values.yaml
              protocol: TCP
          resources: {} # Add resource requests/limits here if needed
      restartPolicy: Always # Restart policy for the containers in the pod
      # volumes: # Define the volumes for the pod
      #   - name: restrictor-config-volume # Name of the volume
      #     configMap:
      #       name: restrictor-config 
